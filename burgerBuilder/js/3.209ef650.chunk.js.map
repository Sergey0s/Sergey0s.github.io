{"version":3,"sources":["containers/Auth/Auth.css","containers/Auth/Auth.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isPassword","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","style","color","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions"],"mappings":"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","file":"static/js/3.209ef650.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth__Auth___2YUr1\"};","import React, {Component} from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Form/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.css'\r\nimport * as actions from '../../store/actions/auth';\r\nimport {checkValidity} from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'E-mail address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                    isPassword: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    };\r\n\r\n    componentDidMount() {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath) {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            }\r\n        };\r\n        this.setState({controls: updatedControls})\r\n    };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp)\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isSignUp: !prevState.isSignUp\r\n            }\r\n        })\r\n    };\r\n\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.controls) {\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementArray.map(formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n        ));\r\n\r\n        if (this.props.loading) {\r\n            form = <Spinner/>\r\n        }\r\n\r\n        let errorMessage = null;\r\n        if (this.props.error) {\r\n            errorMessage = <p style={{color:'red'}}>{this.props.error.message}</p>\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if (this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType='Success'> SUBMIT </Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType='Danger'> SWITCH TO {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token != null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}